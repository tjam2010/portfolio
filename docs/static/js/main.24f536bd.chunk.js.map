{"version":3,"sources":["landing.jpg","sections/menu.js","sections/landing.js","sections/portfolio.js","sections/about.js","sections/resume.js","sections/contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","id","to","Component","Landing","src","landingPic","alt","Portfolio","About","Resume","Contact","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,uOCGtBC,E,iLAGjB,OACI,yBAAKC,UAAU,QACX,4BACI,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,OAAOE,GAAG,KAArC,cAEJ,6BACA,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,cAA1B,YAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,cAA1B,kBAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,cAA1B,kBAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,cAA1B,cAEJ,6BACA,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,UAA1B,aAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,UAA1B,UAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,WAA1B,WAEJ,4BACI,kBAAC,IAAD,CAAMF,UAAU,OAAOE,GAAG,YAA1B,iB,GAhCkBC,a,iBCAbC,E,iLAEjB,OACE,6BAASH,GAAG,WACV,yBAAKA,GAAG,mBACN,yBAAKA,GAAG,mBAAR,8CACA,yBAAKA,GAAG,cAAcI,IAAKC,IAAYC,IAAI,kF,GANhBJ,aCDhBK,E,iLAEjB,OACE,6BAASP,GAAG,kB,GAHqBE,aCAlBM,E,iLAEjB,OACE,6BAASR,GAAG,c,GAHiBE,aCAdO,E,iLAEjB,OACE,6BAAST,GAAG,e,GAHkBE,aCAfQ,E,iLAEjB,OACE,6BAASV,GAAG,gB,GAHmBE,aCgCtBS,G,6LApBX,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,KAAK,aAAaE,UAAWP,IACpC,kBAAC,IAAD,CAAOK,KAAK,SAASE,UAAWN,IAChC,kBAAC,IAAD,CAAOI,KAAK,UAAUE,UAAWL,IACjC,kBAAC,IAAD,CAAOG,KAAK,WAAWE,UAAWJ,IAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAdQR,cCAEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24f536bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landing.fa652fee.jpg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Menu extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"menu\">\r\n            <h1>\r\n                <Link id=\"title\" className=\"link\" to=\"/\" >TJ Gascho</Link>\r\n            </h1>\r\n            <br/>\r\n            <h3>\r\n                <Link className=\"link\" to=\"/portfolio\">My Work</Link>\r\n            </h3>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/portfolio\">understanding</Link>\r\n            </h5>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/portfolio\">communicating</Link>\r\n            </h5>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/portfolio\">designing</Link>\r\n            </h5>\r\n            <br/>\r\n            <h3>\r\n                <Link className=\"link\" to=\"/about\">My Story</Link>\r\n            </h3>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/about\">about</Link>\r\n            </h5>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/resume\">resume</Link>\r\n            </h5>\r\n            <h5>\r\n                <Link className=\"link\" to=\"/contact\">contact</Link>\r\n            </h5>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport landingPic from '../landing.jpg'\r\n\r\nexport default class Landing extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"landing\">\r\n        <div id=\"landing-content\">\r\n          <div id=\"landing-caption\">I am a Sustainability-Focused Storyteller.</div>\r\n          <img id=\"landing-img\" src={landingPic} alt=\"TJ taking photos of some lush green trees on Monkey Mountain in Taiwan.\"/>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Portfolio extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"portfolio\">\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"about\">\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Resume extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"resume\">\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Contact extends Component {\r\n  render() {\r\n    return (\r\n      <section id=\"contact\">\r\n      </section>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Menu from './sections/menu';\nimport Landing from './sections/landing';\nimport Portfolio from './sections/portfolio';\nimport About from './sections/about';\nimport Resume from './sections/resume';\nimport Contact from './sections/contact';\nimport Footer from './sections/footer';\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Menu />\n          <Route path=\"/\" exact component={Landing} />\n          <Route path=\"/portfolio\" component={Portfolio} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/resume\" component={Resume} />\n          <Route path=\"/contact\" component={Contact} />\n          <Portfolio />\n          <About />\n          <Resume />\n          <Contact />\n        {/* <Footer /> */}\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}